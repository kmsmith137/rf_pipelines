#!/usr/bin/env python

import os
import sys
import argparse

# ArgumentParser subclass, to customize the error message
class MyParser(argparse.ArgumentParser):
    def error(self, message=None):
        print >>sys.stderr, 'Usage: rfp-analyze [-r] [-d DEPTH] [-j JSON_OUTFILE] file1.json [file2.json file3.json ...]'
        print >>sys.stderr, '    -r: runs pipeline, and computes some extra information'
        print >>sys.stderr, '    -d: limits depth of latency analysis (integer)'
        print >>sys.stderr, '    -j: dumps result of pipeline_object.get_info() to a json file (usually for debugging)'

        if message is not None:
            print >>sys.stderr, '\nError:', message

        sys.exit(2)


####################################################################################################
#
# Argument parsing, checking


parser = MyParser()

parser.add_argument('json_filenames', nargs='*')
parser.add_argument('-r', action='store_true', help='runs pipeline, and computes some extra information')
parser.add_argument('-d', dest='depth', type=int, help='limits depth of latency analysis (integer)')
parser.add_argument('-j', dest='json_outfile', help='dumps result of pipeline_object.get_info() to a json file (must not already exist)')

args = parser.parse_args()


if len(sys.argv) == 1:
    parser.error()
if len(args.json_filenames) == 0:
    parser.error('at least one json filename must be specified')
if (args.json_outfile is not None) and os.path.exists(args.json_outfile):
    parser.error("json outfile '%s' already exists" % args.json_outfile)


####################################################################################################
#
# Create pipeline object and run pipeline.

import json
import rf_pipelines

p = [ ]
for filename in args.json_filenames:
    f = open(filename, 'r')
    j = json.load(f)
    x = rf_pipelines.pipeline_object.from_json(j)
    p.append(x)

p = rf_pipelines.pipeline(p) if (len(p) > 1) else p[0]
p.bind(outdir=None, verbosity=0)

if args.r:
    print 'Running pipeline (-r flag was specified), this may take some time...'
    p.run(outdir=None, verbosity=0)

j0 = p.get_info()


####################################################################################################


def show_latency(j, depth, indent_level=0):
    ind = '    ' * indent_level
    print '%s[%s+%s] [%s->%s]  %s' % (ind, j['nt_maxgap'], j['nt_maxlag'], j['nt_chunk_in'], j['nt_chunk_out'], j['name'])

    if (depth is not None) and (indent_level >= depth):
        return

    if j['class_name'] == 'pipeline':
        for jj in j['pipeline']:
            show_latency(jj, depth, indent_level+1)
    elif j['class_name'] == 'wi_sub_pipeline':
        assert (len(j['pipeline']) == 3) and (j['pipeline'][1]['class_name'] == 'pipeline')
        show_latency(j['pipeline'][0], depth, indent_level+1)
        for jj in j['pipeline'][1]['pipeline']:
            show_latency(jj, depth, indent_level+1)
        show_latency(j['pipeline'][2], depth, indent_level+1)


def show_ring_buffers(j):
    for r in j['ring_buffers']:
        s = '    %s: %.2f MB, cdims=%s, nds=%s, period=%s, nt_contig=%s, stride=%s' % (r['name'], r['mb'], r['cdims'], r['nds'], r['period'], r['nt_contig'], r['stride'])

        if args.r:
            n1 = r['nget_mirror']
            n2 = r['nget_tot']
            f = float(n1)/float(n2) if (n2 > 0) else 0.0
            s += ', high_water_mark=%s, mirror_frac=%g' % (r['high_water_mark'], f)

        print s

    if j['class_name'] not in [ 'pipeline', 'wi_sub_pipeline' ]:
        return
    for jj in j['pipeline']:
        show_ring_buffers(jj)


print 'Latency analysis format: [nt_maxgap + nt_maxlag] [nt_chunk_in -> nt_chunk_out]'
print
print 'Reminder:'
print
print '   - nt_maxgap is the max allowed (pos_hi - pos_lo), after advance() is called,'
print '     i.e. the max amount of data which has not been processed by the pipeline_object'
print
print '   - nt_maxlag is the max allowed (pos_max - pos_hi), before advance() is called,'
print '     i.e. the max lag between the pipeline_object and incoming data'
print

show_latency(j0, args.depth)

print
print 'Total size of all ring buffers: %.2f MB' % j0['mb_cumul']
print
print 'List of all ring buffers follows'

show_ring_buffers(j0)


if args.json_outfile is not None:
    f = open(args.json_outfile, 'w')
    json.dump(j0, f, indent=4)
    f.close()
    print 'wrote', args.json_outfile
